// Code generated by MockGen. DO NOT EDIT.
// Source: account_repo.go
//
// Generated by this command:
//
//	mockgen -package repository_mocks -source account_repo.go -destination mocks/repository_mocks/account_repo_mock.go
//

// Package repository_mocks is a generated GoMock package.
package repository_mocks

import (
	models "BankingLedgerSystem/models"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
	isgomock struct{}
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// FindAccountByID mocks base method.
func (m *MockAccountRepository) FindAccountByID(ctx context.Context, id string) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAccountByID", ctx, id)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAccountByID indicates an expected call of FindAccountByID.
func (mr *MockAccountRepositoryMockRecorder) FindAccountByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccountByID", reflect.TypeOf((*MockAccountRepository)(nil).FindAccountByID), ctx, id)
}

// InsertAccount mocks base method.
func (m *MockAccountRepository) InsertAccount(ctx context.Context, req models.CreateAccountRequest) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAccount", ctx, req)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAccount indicates an expected call of InsertAccount.
func (mr *MockAccountRepositoryMockRecorder) InsertAccount(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAccount", reflect.TypeOf((*MockAccountRepository)(nil).InsertAccount), ctx, req)
}
