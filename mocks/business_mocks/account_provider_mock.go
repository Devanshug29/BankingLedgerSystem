// Code generated by MockGen. DO NOT EDIT.
// Source: account_provider.go
//
// Generated by this command:
//
//	mockgen -package service_mocks -source account_provider.go -destination mocks/business_mocks/account_provider_mock.go
//

// Package service_mocks is a generated GoMock package.
package service_mocks

import (
	models "BankingLedgerSystem/models"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAccountServiceInterface is a mock of AccountServiceInterface interface.
type MockAccountServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockAccountServiceInterfaceMockRecorder is the mock recorder for MockAccountServiceInterface.
type MockAccountServiceInterfaceMockRecorder struct {
	mock *MockAccountServiceInterface
}

// NewMockAccountServiceInterface creates a new mock instance.
func NewMockAccountServiceInterface(ctrl *gomock.Controller) *MockAccountServiceInterface {
	mock := &MockAccountServiceInterface{ctrl: ctrl}
	mock.recorder = &MockAccountServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountServiceInterface) EXPECT() *MockAccountServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountServiceInterface) CreateAccount(ctx context.Context, req models.CreateAccountRequest) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, req)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountServiceInterfaceMockRecorder) CreateAccount(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountServiceInterface)(nil).CreateAccount), ctx, req)
}

// GetAccount mocks base method.
func (m *MockAccountServiceInterface) GetAccount(ctx context.Context, id string) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, id)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountServiceInterfaceMockRecorder) GetAccount(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountServiceInterface)(nil).GetAccount), ctx, id)
}

// PublishTransaction mocks base method.
func (m *MockAccountServiceInterface) PublishTransaction(ctx context.Context, key, payload []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishTransaction", ctx, key, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishTransaction indicates an expected call of PublishTransaction.
func (mr *MockAccountServiceInterfaceMockRecorder) PublishTransaction(ctx, key, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTransaction", reflect.TypeOf((*MockAccountServiceInterface)(nil).PublishTransaction), ctx, key, payload)
}
